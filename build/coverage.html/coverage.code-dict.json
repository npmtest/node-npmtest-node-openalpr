{"/home/travis/build/npmtest/node-npmtest-node-openalpr/test.js":"/* istanbul instrument in package npmtest_node_openalpr */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-openalpr/lib.npmtest_node_openalpr.js":"/* istanbul instrument in package npmtest_node_openalpr */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_openalpr = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_openalpr = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-openalpr/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-openalpr && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_openalpr */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_openalpr\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_openalpr.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_openalpr.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_openalpr.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_openalpr.__dirname + '/lib.npmtest_node_openalpr.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-openalpr/node_modules/node-openalpr/src/openalpr.js":"var nativeBio = {}\r\n    fs = require (\"fs\")\r\n    child_process = require (\"child_process\")\r\n    os = require (\"os\")\r\n    path = require (\"path\"),\r\n    native_lib_path = path.join (__dirname, '../build/Release/node_openalpr.node');\r\n\r\nif(fs.existsSync (native_lib_path)) {\r\n    nativeLPR = require (native_lib_path);\r\n}\r\nelse {\r\n    nativeLPR = require (path.join (__dirname, \"../release/\" + process.platform + \"_\" + process.arch + \"/node_openalpr.node\"));\r\n}\r\n\r\n/**\r\n * OpenALPR NodeJS wrapper class\r\n */\r\nfunction OpenALPR () {\r\n\tvar object = this;\r\n\tvar initialized = false;\r\n\tvar started = false;\r\n\tvar callback;\r\n\tvar loop;\r\n\tvar in_loop = false;\r\n\t\r\n\t/**\r\n\t * Start the OpenALPR process\r\n\t * @param int count Amount of OpenALPR threads to startup [Default: System CPU count]\r\n\t * @param bool start_queue Auto-start queuing [Default: true]\r\n\t */\r\n\tthis.Start = function (config, runtime, count, start_queue) {\r\n\t\tif (initialized) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t\r\n\t\tif (!config && os.platform () === \"win32\") {\r\n\t\t\tconfig = path.join (__dirname, \"../openalpr.conf\");\r\n\t\t}\r\n\t\t\r\n\t\tif (!runtime && os.platform () === \"win32\") {\r\n\t\t\truntime = path.join (__dirname, \"../openalpr_runtime/\");\r\n\t\t}\r\n\t\t\r\n\t\tvar cpu_count = os.cpus ().length;\r\n\t\t\r\n\t\tinitialized = nativeLPR.Start (config || \"\", runtime || \"\", count || cpu_count, function (reason) {\r\n\t\t\tconsole.log (\"OpenALPR Stopped \" + reason);\r\n\t\t});\r\n\t\t\r\n\t\tif (start_queue !== false) {\r\n\t\t\tthis.StartQueue ();\r\n\t\t}\r\n\r\n\t\treturn initialized;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Stops OpenALPR and kills off all queued up pictures\r\n\t */\r\n\tthis.Stop = function () {\r\n\t\tthis.StopQueue ();\r\n\t\treturn nativeLPR.Stop ();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Starts the queue to update 30 times a second\r\n\t */\r\n\tthis.StartQueue = function () {\r\n\t\tif (!initialized || typeof loop === \"object\") {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\r\n\t\tloop = setInterval (this.queueLoop, 32);\r\n\t}\r\n\t\r\n\t/**\r\n\t * Stops the queue from auto-updating\r\n\t */\r\n\tthis.StopQueue = function () {\r\n\t\tif (typeof loop !== \"object\") {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\r\n\t\tclearInterval (loop);\r\n\t\tloop = null;\r\n\t}\r\n\t\r\n\t/**\r\n\t * Get the version of OpenALPR detected\r\n\t * @return string Version (x.x.x)\r\n\t */\r\n\tthis.GetVersion = function () {\r\n\t\tif (!initialized) {\r\n\t\t\tthrow \"OpenALPR Not Initialized\";\r\n\t\t}\r\n\t\t\r\n\t\treturn nativeLPR.GetVersion ();\r\n\t}\r\n\t\r\n\t/**\r\n\t * Begin the process of identifying a license plate\r\n\t * @param string path Full path to image\r\n\t * @param object Options Options to apply to this identify (state \"oh\", prewarp, detectregion, etc)\r\n\t * @param function callback Callback function on function (error, output)\r\n\t * @return string Status - \"queued\" or \"working\"\r\n\t */\r\n\tthis.IdentifyLicense = function (path, options, callback) {\r\n\t\tif (!initialized) {\r\n\t\t\tthrow \"OpenALPR Not Initialized\";\r\n\t\t}\r\n\t\r\n\t\tif (typeof callback !== \"function\" && typeof options !== \"function\") {\r\n\t\t\tthrow \"Callback method required\";\r\n\t\t}\r\n\t\telse if (typeof options === \"function\") {\r\n\t\t\tcallback = options;\r\n\t\t}\r\n\t\t\r\n\t\tif (!fs.existsSync (path)) {\r\n\t\t\tthrow \"File does exist\";\r\n\t\t}\r\n\t\t\r\n\t\tif (typeof options === \"undefined\" || typeof options === \"function\" || !options) {\r\n\t\t\toptions = {};\r\n\t\t}\r\n\t\t\r\n\t\tvar regions = [];\r\n\t\tif (options.regions && options.regions.length) {\r\n\t\t\tfor (var r in options.regions) {\r\n\t\t\t\tvar region = options.regions[r];\r\n\t\t\t\tif (!region.x || !region.y || !region.width || !region.height) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tregions.push ([region.x, region.y, region.width, region.height]);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn nativeLPR.IdentifyLicense (path, options.state || \"\", options.prewarp || \"\", options.detectRegion || false, regions, function (error, output) {\r\n\t\t\tcallback (error, JSON.parse (output));\r\n\t\t});\r\n\t}\r\n\t\r\n\t/**\r\n\t * Checks the queue to see if any instances are free to begin work\r\n\t */\r\n\tthis.queueLoop = function () {\r\n\t\tif (in_loop) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\r\n\t\tin_loop = true;\r\n\t\tnativeLPR.CheckQueue ();\r\n\t\tin_loop = false;\r\n\t}\r\n}\r\n\r\nmodule.exports = new OpenALPR ();\r\n","/home/travis/build/npmtest/node-npmtest-node-openalpr/node_modules/node-openalpr/Gruntfile.js":"module.exports = function(grunt) {\r\n    grunt.initConfig({\r\n        gyp: {\r\n            ia32: {\r\n                command: 'rebuild',\r\n                options: {\r\n                    arch: 'ia32'\r\n                }\r\n            },\r\n            x64: {\r\n                command: 'rebuild',\r\n                options: {\r\n                    arch: 'x64'\r\n                }\r\n            }\r\n        },\r\n        \"nw-gyp\": {\r\n            ia32: {\r\n                command: 'rebuild',\r\n                options: {\r\n                    arch: 'ia32'\r\n                }\r\n            },\r\n            x64: {\r\n                command: 'rebuild',\r\n                options: {\r\n                    arch: 'x64'\r\n                }\r\n            }\r\n        },\r\n        copy: {\r\n            ia32: {\r\n                files: [{src: 'build/Release/node_printer.node', dest: 'lib/node_printer_' + process.platform + '_ia32.node'}]\r\n            },\r\n            x64: {\r\n                files: [{src: 'build/Release/node_printer.node', dest: 'lib/node_printer_' + process.platform + '_x64.node'}]\r\n            }\r\n        }\r\n    });\r\n\r\n    grunt.loadNpmTasks('grunt-contrib-jshint');\r\n    grunt.loadNpmTasks('grunt-node-gyp');\r\n    grunt.loadNpmTasks('grunt-nw-gyp');\r\n    grunt.loadNpmTasks('grunt-contrib-copy');\r\n\r\n    grunt.registerTask('build-nw-ia32', [\r\n            'nw-gyp:ia32',\r\n            'copy:ia32'\r\n    ]);\r\n\r\n    grunt.registerTask('build-ia32', [\r\n            'gyp:ia32',\r\n            'copy:ia32'\r\n    ]);\r\n\r\n    grunt.registerTask('build-x64', [\r\n            'gyp:x64',\r\n            'copy:x64'\r\n    ]);\r\n\r\n    grunt.registerTask('build-nw-x64', [\r\n            'nw-gyp:x64',\r\n            'copy:x64'\r\n    ]);\r\n\r\n    grunt.registerTask('build', [\r\n            'build-ia32',\r\n            'build-x64'\r\n    ]);\r\n\r\n    grunt.registerTask('build-nw', [\r\n            'build-nw-ia32',\r\n            'build-nw-x64'\r\n    ]);\r\n}\r\n","/home/travis/build/npmtest/node-npmtest-node-openalpr/node_modules/node-openalpr/openalpr.js":"module.exports = require('./src/openalpr');\r\n","/home/travis/build/npmtest/node-npmtest-node-openalpr/node_modules/node-openalpr/src/index.js":"module.exports = require('./openalpr');\r\n"}